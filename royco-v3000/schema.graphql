type RoycoAccountDeployed {
  id: ID!
  chainId: BigInt!
  user: String! # address
  accountId: BigInt! # uint96
  roycoAccount: String! # address
  blockNumber:   BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type SafeSetup {
  id: ID!
  chainId: BigInt!
  initiator: String! # address
  owners: [String!]! # address[]
  threshold: BigInt! # uint256
  initializer: String! # address
  fallbackHandler: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ExecutionSuccess {
  id: ID!
  chainId: BigInt!
  safeAddress: String! # address
  txHash: String! # bytes32
  payment: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ExecutionFailure {
  id: ID!
  chainId: BigInt!
  safeAddress: String! # address
  txHash: String! # bytes32
  payment: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type SafeReceived {
  id: ID!
  chainId: BigInt!
  safeAddress: String! # address
  sender: String! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawSafeTransaction {
  id: ID!
  rawSafeRefId: String! # <CHAIN_ID>_<SAFE_ADDRESS>
  chainId: BigInt!
  safeAddress: String! # address
  to: String! # address
  value: BigInt! # uint256
  data: String! # hex-encoded bytes
  operation: Int! # uint8
  safeTxGas: BigInt! # uint256
  baseGas: BigInt! # uint256
  gasPrice: BigInt! # uint256
  gasToken: String! # address
  refundReceiver: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type RawSafe {
  id: ID! # <CHAIN_ID>_<SAFE_ADDRESS>
  chainId: BigInt!
  safeAddress: String! # address
  owners: [String!]! # array of addresses
  threshold: BigInt! # number of confirmations
  creatorAddress: String! # address of the wallet that created the safe
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTransactionHash: String!
  createdLogIndex: BigInt!
  updatedBlockNumber: BigInt!
  updatedBlockTimestamp: BigInt!
  updatedTransactionHash: String!
  updatedLogIndex: BigInt!
}

type RawSafeMap {
  id: ID! # <CHAIN_ID>_<SAFE_ADDRESS>_<ACCOUNT_ADDRESS>
  rawSafeRefId: String! # <CHAIN_ID>_<SAFE_ADDRESS>
  chainId: BigInt!
  safeAddress: String! # address
  accountAddress: String! # address
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTransactionHash: String!
  createdLogIndex: BigInt!
  updatedBlockNumber: BigInt!
  updatedBlockTimestamp: BigInt!
  updatedTransactionHash: String!
  updatedLogIndex: BigInt!
}

type RawSafeTokenizedPosition {
  id: ID! # <CHAIN_ID>_<SAFE_ADDRESS>_<TOKEN_ADDRESS>
  rawSafeRefId: String! # <CHAIN_ID>_<SAFE_ADDRESS>
  chainId: BigInt!
  safeAddress: String! # address
  tokenAddress: String! # address
  tokenId: String! # <CHAIN_ID>-<TOKEN_ADDRESS> (Note: this has 'hyphen', not 'underscore')
  tokenAmount: BigInt!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTransactionHash: String!
  createdLogIndex: BigInt!
  updatedBlockNumber: BigInt!
  updatedBlockTimestamp: BigInt!
  updatedTransactionHash: String!
  updatedLogIndex: BigInt!
}

# Entity to track tokens that have interacted with safes (used for template bootstrapping)
type TrackedErc20Token {
  id: ID! # <CHAIN_ID>_<TOKEN_ADDRESS>
  chainId: BigInt!
  tokenAddress: String! # address
  tokenId: String! # <CHAIN_ID>-<TOKEN_ADDRESS> (Note: this has 'hyphen', not 'underscore')
  interactionCount: BigInt!
  firstSeenBlockNumber: BigInt!
  firstSeenBlockTimestamp: BigInt!
  firstSeenTransactionHash: String!
  lastSeenBlockNumber: BigInt!
  lastSeenBlockTimestamp: BigInt!
  lastSeenTransactionHash: String!
}