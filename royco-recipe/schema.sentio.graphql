type OwnershipTransferred @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  user: String! @indexed # address
  newOwner: String! @indexed # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type MarketCreated @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  marketID: BigInt! @indexed # uint256
  marketHash: String! @indexed # String
  inputToken: String! @indexed # address
  lockupTime: BigInt! # uint256
  frontendFee: BigInt! # uint256
  rewardStyle: Int! @indexed # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IPOfferCreated @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  offerID: BigInt! @indexed # uint256
  offerHash: String! @indexed # String
  marketHash: String! @indexed # String
  ip: String! @indexed # address
  quantity: BigInt! # uint256
  incentivesOffered: [String!]! # address[]
  incentiveAmounts: [BigInt!]! # uint256[]
  protocolFeeAmounts: [BigInt!]! # uint256[]
  frontendFeeAmounts: [BigInt!]! # uint256[]
  expiry: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IPOfferFilled @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  offerHash: String! @indexed # String
  ap: String! @indexed # address
  fillAmount: BigInt! # uint256
  weirollWallet: String! @indexed # address
  incentiveAmounts: [BigInt!]! # uint256[]
  protocolFeeAmounts: [BigInt!]! # uint256[]
  frontendFeeAmounts: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IPOfferCancelled @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  offerHash: String! @indexed # String
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type APOfferCreated @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  offerID: BigInt! @indexed # uint256
  marketHash: String! @indexed # String
  ap: String! @indexed # address
  fundingVault: String! @indexed # address
  quantity: BigInt! # uint256
  incentiveAddresses: [String!]! # address[]
  incentiveAmounts: [BigInt!]! # uint256[]
  expiry: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type APOfferFilled @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  offerID: BigInt! @indexed # uint256
  ip: String! @indexed # address
  fillAmount: BigInt! # uint256
  weirollWallet: String! @indexed # address
  incentiveAmounts: [BigInt!]! # uint256[]
  protocolFeeAmounts: [BigInt!]! # uint256[]
  frontendFeeAmounts: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type APOfferCancelled @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  offerID: BigInt! @indexed # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WeirollWalletClaimedIncentive @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  weirollWallet: String! @indexed # address
  recipient: String! @indexed # address
  incentive: String! @indexed # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WeirollWalletExecutedWithdrawal @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  weirollWallet: String! @indexed # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WeirollWalletForfeited @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  weirollWallet: String! @indexed # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type FeesClaimed @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  claimant: String! @indexed # address
  incentive: String! @indexed # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type MerkleDepositMade @entity(immutable: true) {
  id: String!
  chainId: BigInt! @indexed # Hardcoded
  lastCcdmNonceBridged: BigInt! @indexed # uint256
  marketHash: String! @indexed # String
  weirollWallet: String! @indexed # address
  depositor: String! @indexed # address
  amountDeposited: BigInt! # uint256
  merkleDepositNonce: BigInt! @indexed # uint256
  depositLeaf: String! @indexed # String
  depositLeafIndex: BigInt! @indexed # uint256
  updatedMerkleRoot: String! # String
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawMarketRecipe @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  chainId: BigInt! @indexed # Hardcoded
  marketType: Int! @indexed # Hardcoded
  marketId: String! @indexed # Market Hash
  inputTokenId: String! @indexed # <CHAIN_ID>-<TOKEN_ADDRESS>
  inputTokenAmount: BigInt! # Input Token Amount
  lockupTime: BigInt! # Lockup Time
  frontendFee: BigInt! # Frontend Fee
  rewardStyle: Int! @indexed # 0: Upfront, 1: Arrear, 2: Forfeitable, 3: Streaming
  depositWeirollCommands: [String!]! # Deposit Weiroll Commands
  depositWeirollState: [String!]! # Deposit Weiroll State
  withdrawWeirollCommands: [String!]! # Withdraw Weiroll Commands
  withdrawWeirollState: [String!]! # Withdraw Weiroll State
  blockNumber: BigInt! # Block Number
  blockTimestamp: BigInt! # Block Timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt!
  # Derived fields
  rawMarketTokenBalanceRecipes: [RawMarketTokenBalanceRecipe!]!
    @derivedFrom(field: "rawMarketRefId")
  rawOfferRecipes: [RawOfferRecipe!]! @derivedFrom(field: "rawMarketRefId")
  rawOfferTokenBalanceRecipes: [RawOfferTokenBalanceRecipe!]!
    @derivedFrom(field: "rawMarketRefId")
  rawPositionRecipes: [RawPositionRecipe!]!
    @derivedFrom(field: "rawMarketRefId")
  rawPositionTokenBalanceRecipes: [RawPositionTokenBalanceRecipe!]!
    @derivedFrom(field: "rawMarketRefId")
  rawVolume: [RawVolume!]! @derivedFrom(field: "rawMarketRefId")
}

type RawMarketTokenBalanceRecipe @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>_<TOKEN_CLASS>_<TOKEN_ID>
  rawMarketRefId: RawMarketRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  chainId: BigInt! @indexed # Hardcoded
  marketType: Int8! @indexed # Hardcoded
  marketId: String! @indexed # Market Hash
  tokenClass: Int8! @indexed # 0: Input, 1: Incentive
  tokenId: String! @indexed # <CHAIN_ID>-<TOKEN_ADDRESS>
  tokenAmount: BigInt! @indexed # Token Amount
}

type RawOfferRecipe @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<OFFER_SIDE>_<OFFER_ID>
  rawMarketRefId: RawMarketRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  chainId: BigInt! @indexed # Hardcoded
  marketType: Int8! @indexed # Hardcoded
  offerSide: Int8! @indexed # 0: AP, 1: IP
  offerId: String! @indexed # For IP offer, it's actually offer hash, but we are using it as id
  marketId: String! @indexed # Market Hash
  accountAddress: String! @indexed # Wallet Address
  fundingVault: String! @indexed # Funding Vault Address (if EOA, then NULL_ADDRESS, else ERC4626 Vault Address)
  token0Id: String! @indexed # Input Token
  token0Amount: BigInt! @indexed # Input Amount
  token0AmountRemaining: BigInt! @indexed # Input Amount Remaining
  token1Ids: [String!]! # Incentive Tokens
  token1Amounts: [BigInt!]! # Incentive Amounts
  token1AmountsRemaining: [BigInt!]! # Incentive Amounts Remaining
  expiry: BigInt! @indexed # Offer Expiry
  isCancelled: Boolean! @indexed # Initially: false
  blockNumber: BigInt! # Block Number
  blockTimestamp: BigInt! # Block Timestamp
  transactionHash: String! # Transaction Hash
  logIndex: BigInt! # Log Index
  # Derived fields
  rawOfferTokenBalanceRecipes: [RawOfferTokenBalanceRecipe!]!
    @derivedFrom(field: "rawOfferRefId")
  rawPositionRecipes: [RawPositionRecipe!]! @derivedFrom(field: "rawOfferRefId")
  rawPositionTokenBalanceRecipes: [RawPositionTokenBalanceRecipe!]!
    @derivedFrom(field: "rawOfferRefId")
}

type RawOfferTokenBalanceRecipe @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<OFFER_SIDE>_<OFFER_ID>_<TOKEN_CLASS>_<TOKEN_ID>
  rawMarketRefId: RawMarketRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  rawOfferRefId: RawOfferRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<OFFER_SIDE>_<OFFER_ID>
  chainId: BigInt! @indexed # Hardcoded
  marketType: Int8! @indexed # Hardcoded
  offerSide: Int8! @indexed # 0: AP, 1: IP
  offerId: String! @indexed # For IP offer, it's actually offer hash, but we are using it as id
  marketId: String! @indexed # Market Hash
  accountAddress: String! @indexed # Wallet Address
  fundingVault: String! @indexed # Funding Vault Address (if EOA, then NULL_ADDRESS, else ERC4626 Vault Address)
  tokenClass: Int8! @indexed # 0: Input, 1: Incentive
  tokenId: String! @indexed # <CHAIN_ID>-<TOKEN_ADDRESS>
  tokenAmount: BigInt! @indexed # Token Amount
  tokenAmountRemaining: BigInt! @indexed # Token Amount Remaining
}

type RawPositionRecipe @entity {
  id: String! # <CHAIN_ID>_<WEIROLL_WALLET_ADDRESS>
  rawMarketRefId: RawMarketRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  rawOfferRefId: RawOfferRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<OFFER_SIDE>_<OFFER_ID>
  chainId: BigInt! @indexed # Hardcoded
  weirollWallet: String! @indexed # Weiroll Wallet Address
  accountAddress: String! @indexed # Wallet Address
  marketId: String! @indexed # Market Hash
  rewardStyle: Int! @indexed # 0: Upfront, 1: Arrear, 2: Forfeitable, 3: Streaming
  token0Id: String! @indexed # Input Token
  token0Amount: BigInt! # Input Amount
  token1Ids: [String!]! # Incentive Tokens
  token1Amounts: [BigInt!]! # Incentive Amounts
  isForfeited: Boolean! @indexed # Initially: false
  isWithdrawn: Boolean! @indexed # Initially: false
  isClaimed: [Boolean!]! # Initially: Upfront - true, Arrear & Forfeitable - false
  unlockTimestamp: BigInt! # Unlock Timestamp
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String! # Transaction hash
  logIndex: BigInt!
  tag: String @optional # Optional Tag
  # Derived fields
  rawPositionTokenBalanceRecipes: [RawPositionTokenBalanceRecipe!]!
    @derivedFrom(field: "rawPositionRefId")
}

type RawPositionTokenBalanceRecipe @entity {
  id: String! # <CHAIN_ID>_<WEIROLL_WALLET_ADDRESS>_<TOKEN_CLASS>_<TOKEN_ID>
  rawMarketRefId: RawMarketRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  rawOfferRefId: RawOfferRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<OFFER_SIDE>_<OFFER_ID>
  rawPositionRefId: RawPositionRecipe! @indexed # <CHAIN_ID>_<WEIROLL_WALLET_ADDRESS>
  chainId: BigInt! @indexed # Hardcoded
  weirollWallet: String! @indexed # Weiroll Wallet Address
  accountAddress: String! @indexed # Wallet Address
  tokenClass: Int8! @indexed # 0: Input, 1: Incentive
  tokenId: String! @indexed # <CHAIN_ID>-<TOKEN_ADDRESS>
  tokenAmount: BigInt! # Token Amount
  isWithdrawn: Boolean! @indexed # Initially: false
}

type RawVolume @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>_<TOKEN_ID>
  rawMarketRefId: RawMarketRecipe! @indexed # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  chainId: BigInt! @indexed # Hardcoded
  marketType: Int8! @indexed # Hardcoded
  marketId: String! @indexed # Market Hash
  tokenId: String! @indexed # <CHAIN_ID>-<TOKEN_ADDRESS>
  volume: BigInt! # Volume Amount
  blockNumber: BigInt! # Block Number
  blockTimestamp: BigInt! # Block Timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log Index
}

type RawPositionRecipeBoyco @entity {
  id: String! # <CHAIN_ID>_<WEIROLL_WALLET_ADDRESS>
  rawPositionRefId: RawPositionRecipe! @indexed # <CHAIN_ID>_<WEIROLL_WALLET_ADDRESS>
  chainId: BigInt! @indexed # Hardcoded
  weirollWallet: String! @indexed # Weiroll Wallet Address
  tag: String! @indexed # Tag
  isWithdrawn: Boolean! @indexed # Initially: false
}
