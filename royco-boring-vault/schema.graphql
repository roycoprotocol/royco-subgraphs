type Approval @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  owner: String! # address
  spender: String! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type AuthorityUpdated @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  user: String! # address
  newAuthority: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Enter @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  from: String! # address
  asset: String! # address
  amount: BigInt! # uint256
  to: String! # address
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type EpochStarted @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  epoch: BigInt! # uint256
  eligibleShares: BigInt! # uint256
  startTimestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Exit @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  to: String! # address
  asset: String! # address
  amount: BigInt! # uint256
  from: String! # address
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type OwnershipTransferred @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  user: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RewardsDistributed @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  token: String! # address
  startEpoch: BigInt! # uint256
  endEpoch: BigInt! # uint256
  amount: BigInt! # uint256
  rewardId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Transfer @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  from: String! # address
  to: String! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type UserDepositedIntoEpoch @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  user: String! # address
  epoch: BigInt! # uint256
  shareAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type UserRewardsClaimed @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  user: String! # address
  token: String! # address
  rewardId: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type UserWithdrawnFromEpoch @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultAddress: String!
  user: String! # address
  epoch: BigInt! # uint256
  shareAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type BoringEpoch @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<EPOCH>
  boringVaultRefId: String! # Boring vault reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  epoch: BigInt! # Epoch
  startTimestamp: BigInt! # Start timestamp
  endTimestamp: BigInt! # End timestamp
  eligibleShares: BigInt! # Eligible shares
  rewardIds: [BigInt!]! # Reward IDs
  rewardTokenIds: [String!]! # Reward token IDs
  rewardRawAmounts: [BigInt!]! # Reward amounts
  # Derived fields
  boringAccountUpdates: [BoringAccountUpdate!]!
    @derivedFrom(field: "boringEpochRefId")
  boringEpochRewardBalances: [BoringEpochRewardBalance!]!
    @derivedFrom(field: "boringEpochRefId")
}

type BoringAccountUpdate @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<ACCOUNT_ADDRESS>_<EPOCH>
  boringVaultRefId: String! # Boring vault reference
  boringEpochRefId: BoringEpoch! # Boring epoch reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  accountAddress: String! # Account address
  epoch: BigInt! # Epoch
  shares: BigInt! # Shares
  blockNumber: BigInt! # Block number
  blockTimestamp: BigInt! # Block timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log index
}

type BoringEpochRewardBalance @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<EPOCH>_<REWARD_ID>
  boringVaultRefId: String! # Boring vault reference
  boringEpochRefId: BoringEpoch! # Boring epoch reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  epoch: BigInt! # Epoch
  rewardId: BigInt! # Reward ID
  tokenId: String! # <CHAIN_ID>-<TOKEN_ADDRESS>
  tokenAddress: String! # Token address
  rawAmount: BigInt! # Token amount in wei
  startTimestamp: BigInt! # Start timestamp
  endTimestamp: BigInt! # End timestamp
  blockNumber: BigInt! # Block number
  blockTimestamp: BigInt! # Block timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log index
}

type BoringReward @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<REWARD_ID>
  boringVaultRefId: String! # Boring vault reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  rewardId: BigInt! # Reward ID
  tokenId: String! # <CHAIN_ID>-<TOKEN_ADDRESS>
  tokenAddress: String! # Token address
  rawAmount: BigInt! # Token amount in wei
  startEpoch: BigInt! # Start epoch
  endEpoch: BigInt! # End epoch
  blockNumber: BigInt! # Block number
  blockTimestamp: BigInt! # Block timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log index
  # Derived fields
  boringRewardClaimed: BoringRewardClaimed!
    @derivedFrom(field: "boringRewardRefId")
}

type BoringRewardClaimed @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<ACCOUNT_ADDRESS>_<REWARD_ID>
  boringVaultRefId: String! # Boring vault reference
  boringRewardRefId: BoringReward! # Boring reward reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  accountAddress: String! # Account address
  rewardId: BigInt! # Reward ID
  amount: BigInt! # Amount
  blockNumber: BigInt! # Block number
  blockTimestamp: BigInt! # Block timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log index
}

type OnChainWithdrawRequested @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  requestId: String! # bytes32
  user: String! # address
  assetOut: String! # address
  nonce: BigInt! # uint96
  amountOfShares: BigInt! # uint128
  amountOfAssets: BigInt! # uint128
  creationTime: BigInt! # uint40
  secondsToMaturity: BigInt! # uint24
  secondsToDeadline: BigInt! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type OnChainWithdrawCancelled @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  requestId: String! # bytes32
  user: String! # address
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type OnChainWithdrawSolved @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  requestId: String! # bytes32
  user: String! # address
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Paused @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Unpaused @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WithdrawAssetSetup @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  assetOut: String! # address
  secondsToMaturity: BigInt! # uint24
  minimumSecondsToDeadline: BigInt! # uint24
  minDiscount: BigInt! # uint16
  maxDiscount: BigInt! # uint16
  minimumShares: BigInt! # uint96
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WithdrawAssetStopped @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  assetOut: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WithdrawAssetUpdated @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  vaultQueueAddress: String!
  assetOut: String! # address
  minimumSecondsToDeadline: BigInt! # uint24
  secondsToMaturity: BigInt! # uint24
  minDiscount: BigInt! # uint16
  maxDiscount: BigInt! # uint16
  minimumShares: BigInt! # uint96
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawPositionBoring @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<ACCOUNT_ADDRESS>
  boringVaultRefId: String! # Boring vault reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  accountAddress: String! # Account address
  shares: BigInt! # Shares
  blockNumber: BigInt! # Block number
  blockTimestamp: BigInt! # Block timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log index
}

type BoringWithdrawal @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<REQUEST_ID>
  boringVaultRefId: String! # Boring vault reference
  chainId: BigInt! # Chain ID
  vaultAddress: String! # Vault address
  requestId: String! # Request ID
  accountAddress: String! # Account address
  assetId: String! # Asset ID
  assetOut: String! # Asset out
  nonce: BigInt! # Nonce
  amountOfShares: BigInt! # Amount of shares
  amountOfAssets: BigInt! # Amount of assets
  creationTime: BigInt! # Creation time
  secondsToMaturity: BigInt! # Seconds to maturity
  secondsToDeadline: BigInt! # Seconds to deadline
  status: String! # Status: "requested", "cancelled", "complete"
  expiresAt: BigInt! # Expires at
  blockNumber: BigInt! # Block number
  blockTimestamp: BigInt! # Block timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log index
}

type RawGlobalActivity @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<TRANSACTION_HASH>_<LOG_INDEX>_<CATEGORY>_<SUB_CATEGORY>_<TOKEN_INDEX>
  chainId: BigInt! # Hardcoded
  category: String! # Category (e.g. "recipe", "vault", "boring", etc.)
  subCategory: String! # Sub Category (e.g. "deposit", "withdraw", "claim", etc.)
  sourceRefId: String! # Source Ref ID
  contractAddress: String! # Contract Address
  accountAddress: String! # Account Address
  tokenIndex: BigInt! # Token Index
  tokenId: String! # Token ID
  tokenAddress: String! # Token Address
  tokenAmount: BigInt! # Token Amount
  blockNumber: BigInt! # Block Number
  blockTimestamp: BigInt! # Block Timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log Index
}

type RawGlobalAccountUpdate @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<VAULT_ADDRESS>_<ACCOUNT_ADDRESS>_<BLOCK_TIMESTAMP>
  chainId: BigInt! # Chain ID
  sourceRefId: String! # Source Ref ID: <CHAIN_ID>_<VAULT_ADDRESS>
  sourceAddress: String! # Source Address: <VAULT_ADDRESS>
  sourceCategory: String! # Source Category: "boring"
  accountAddress: String! # Account Address
  shares: BigInt! # Shares
  blockNumber: BigInt! # Block Number
  blockTimestamp: BigInt! # Block Timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log Index
}
