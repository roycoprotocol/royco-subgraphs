type Award @entity(immutable: true) {
  id: String!
  pointsId: String! # address
  rawPointsProgramRefId: RawPointsProgram! # RawPointsProgram primary key
  recipient: String! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type CoIPsAdded @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  coIPs: [String!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type CoIPsRemoved @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  coIPs: [String!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type DefaultProtocolFeeClaimantSet @entity(immutable: true) {
  id: String!
  newDefaultProtocolFeeClaimant: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type DefaultProtocolFeeSet @entity(immutable: true) {
  id: String!
  newDefaultProtocolFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type FeesClaimed @entity(immutable: true) {
  id: String!
  claimant: String! # address
  incentive: String! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentiveCampaignCreated @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  ip: String! # address
  actionVerifier: String! # address
  actionParams: String! # bytes
  defaultProtocolFee: BigInt! # uint64
  incentivesOffered: [String!]! # address[]
  incentiveAmountsOffered: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentivesAdded @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  ip: String! # address
  incentivesOffered: [String!]! # address[]
  incentiveAmountsOffered: [BigInt!]! # uint256[]
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  rawCoIpRefId: RawCoIp
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentivesClaimed @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  ap: String! # address
  incentivesClaimed: [String!]! # address[]
  incentiveAmountsPaid: [BigInt!]! # uint256[]
  protocolFeesPaid: [BigInt!]! # uint256[]
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentivesRemoved @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  ip: String! # address
  incentivesRemoved: [String!]! # address[]
  incentiveAmountsRemoved: [BigInt!]! # uint256[]
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentiveLockerOwnershipTransferStarted @entity(immutable: true) {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentiveLockerOwnershipTransferred @entity(immutable: true) {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type PointsProgramCreated @entity(immutable: true) {
  id: String!
  pointsId: String! # address
  owner: String! # address
  name: String! # string
  symbol: String! # string
  decimals: Int! # uint8
  whitelistedIPs: [String!]! # address[]
  spendCaps: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type PointsProgramOwnershipTransferred @entity(immutable: true) {
  id: String!
  pointsId: String! # address
  rawPointsProgramRefId: RawPointsProgram! # RawPointsProgram primary key
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type PointsSpent @entity(immutable: true) {
  id: String!
  pointsId: String! # address
  ip: String! # address
  rawPointsProgramRefId: RawPointsProgram! # RawPointsProgram primary key
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ProtocolFeeClaimantForCampaignSet @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  newProtocolFeeClaimant: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ProtocolFeeForCampaignSet @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  newProtocolFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type SpendCapsUpdated @entity(immutable: true) {
  id: String!
  pointsId: String! # address
  ips: [String!]! # address[]
  spendCaps: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type AssertersBlacklisted @entity(immutable: true) {
  id: String!
  blacklistedAsserters: [String!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type AssertersWhitelisted @entity(immutable: true) {
  id: String!
  whitelistedAsserters: [String!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type AssertionLivenessUpdated @entity(immutable: true) {
  id: String!
  newAssertionLiveness: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type BondCurrencyUpdated @entity(immutable: true) {
  id: String!
  newBondCurrency: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type EmissionRatesUpdated @entity(immutable: true) {
  id: String!
  incentiveCampaignId: String! # bytes32
  incentives: [String!]! # address[]
  updatedRates: [BigInt!]! # uint256[]
  rawEmissionRatesRefId: RawEmissionRates!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type MerkleRootAsserted @entity(immutable: true) {
  id: String!
  assertionId: String! # bytes32
  incentiveCampaignId: String! # bytes32
  asserter: String! # address
  merkleRoot: String! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type MerkleRootAssertionDisputed @entity(immutable: true) {
  id: String!
  assertionId: String! # bytes32
  merkleRoot: String! # bytes32
  rawMerkleRootAssertionRefId: RawUmaMerkleRootAssertion!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type MerkleRootAssertionResolved @entity(immutable: true) {
  id: String!
  assertionId: String! # bytes32
  merkleRoot: String! # bytes32
  rawMerkleRootAssertionRefId: RawUmaMerkleRootAssertion!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type UmaMerkleChefAVOwnershipTransferStarted @entity(immutable: true) {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type UmaMerkleChefAVOwnershipTransferred @entity(immutable: true) {
  id: String!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawIncentiveCampaign @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  actionVerifier: String! # Address of the action verifier
  actionParams: String! # String representing the actionParams for this campaign
  owner: String! # The address of the IP of this campaign
  incentivesOfferedIds: [String!]! # List of incentive IDs offered
  incentiveAmountsOffered: [BigInt!]! # Corresponding list of incentive amounts offered
  incentiveAmountsRemaining: [BigInt!]! # Corresponding list of incentive amounts remaining
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
  # Derived Fields
  incentiveCampaignBalancesRefIds: [RawIncentiveCampaignBalance!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  coIpRefIds: [RawCoIp!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentivesAddedRefIds: [IncentivesAdded!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentivesRemovedRefIds: [IncentivesRemoved!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentivesClaimedRefIds: [IncentivesClaimed!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  umcAvRatesRefId: RawEmissionRates! @derivedFrom(field: "rawIncentiveCampaignRefId")
  umcAvMerkleRootStateRefId: RawUmaMerkleRootState! @derivedFrom(field: "rawIncentiveCampaignRefId")
}

type RawIncentiveCampaignBalance @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<AP_ADDRESS>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Address identifying the points program
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  accountAddress: String! # address - Address of the AP
  incentiveIds: [String!]! # address[] - The incentives claimed for this campaign by the AP
  incentiveBalances: [BigInt!]! # uint256[] - The amounts claimed for this campaign by the AP
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawCoIp @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<COIP_ADDRESS>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  accountAddress: String! # Address of the CoIP
  isCoIP: Boolean! # Flag indicating whether this CoIP can add incentives to this campaign
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
  incentivesAddedRefIds: [IncentivesAdded!]! @derivedFrom(field: "rawCoIpRefId") # All incentives added by this CoIP
}

type RawPointsProgram @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<POINTS_PROGRAM_ID>
  chainId: BigInt! # Hardcoded
  pointsAddress: String! # Address identifying the points program
  owner: String! # Points program owner address
  name: String! # string - Points program name 
  symbol: String! # string - Points program symbol
  decimals: Int! # uint8 - Points program decimals
  totalSupply: BigInt! # Total points awarded for this points program
  whitelistedIPs: [String!]! # address[]
  spendCaps: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
  # Derived Fields
  whitelistedIPsRefIds: [RawWhitelistedIP!]! @derivedFrom(field: "rawPointsProgramRefId")
  pointsSpentRefIds: [PointsSpent!]! @derivedFrom(field: "rawPointsProgramRefId")
  ownershipTransferredRefIds: [PointsProgramOwnershipTransferred!]! @derivedFrom(field: "rawPointsProgramRefId")
  awardRefIds: [Award!]! @derivedFrom(field: "rawPointsProgramRefId")
  pointsProgramBalanceRefIds: [RawPointsProgramBalance!]! @derivedFrom(field: "rawPointsProgramRefId")
}


type RawWhitelistedIP @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<POINTS_PROGRAM_ID>_<IP_ADDRESS>
  chainId: BigInt! # Hardcoded
  pointsAddress: String! # Address identifying the points program
  rawPointsProgramRefId: RawPointsProgram!
  accountAddress: String! # address - Address of the IP
  spendCap: BigInt! # uint256 - The IP's spend capacity
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawPointsProgramBalance @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<POINTS_PROGRAM_ID>_<AP_ADDRESS>
  chainId: BigInt! # Hardcoded
  pointsAddress: String! # Address identifying the points program
  rawPointsProgramRefId: RawPointsProgram!
  accountAddress: String! # address - Address of the AP
  balance: BigInt! # uint256 - The AP's points balance
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawEmissionRates @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_UMCAV_RATES
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  incentiveIds: [String!]! # address[] - The incentives for this campaign that had their rates updatedRates
  emissionRates: [BigInt!]! # uint256[] - The updated rates scaled up by WAD
  umcAvRateUpdatesRefIds: [EmissionRatesUpdated!]! @derivedFrom(field: "rawEmissionRatesRefId")
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawUmaMerkleRootAssertion @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<ASSERTION_ID>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawMerkleRootStateRefId: RawUmaMerkleRootState!
  assertionId: String!
  accountAddress: String!
  merkleRoot: String!
  state: Int! # 0 = Asserted, 1 = Resolved, 2 = Disputed
  merkleRootDisputedRefId: MerkleRootAssertionDisputed! @derivedFrom(field: "rawMerkleRootAssertionRefId")
  merkleRootResolvedRefId: MerkleRootAssertionResolved! @derivedFrom(field: "rawMerkleRootAssertionRefId")
  blockNumber: BigInt! 
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawUmaMerkleRootState @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_UMA_MERKLE_ROOT_STATE
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  merkleRoot: String!
  rawUmaMerkleRootAssertionRefIds: [RawUmaMerkleRootAssertion!]! @derivedFrom(field: "rawMerkleRootStateRefId")
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}