type Award @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  pointsId: String! # address
  rawPointsProgramRefId: RawPointsProgram! # RawPointsProgram primary key
  recipient: String! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type CoIPsAdded @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  coIPs: [String!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type CoIPsRemoved @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  coIPs: [String!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type DefaultProtocolFeeClaimantSet @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  newDefaultProtocolFeeClaimant: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type DefaultProtocolFeeSet @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  newDefaultProtocolFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type FeesClaimed @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  claimant: String! # address
  incentive: String! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentiveCampaignCreated @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveLockerAddress: String! # address
  incentiveCampaignId: String! # bytes32
  ip: String! # address
  actionVerifier: String! # address
  actionParams: String! # bytes
  defaultProtocolFee: BigInt! # uint64
  incentivesOffered: [String!]! # address[]
  incentiveAmountsOffered: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentivesAdded @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  ip: String! # address
  incentivesOffered: [String!]! # address[]
  incentiveAmountsOffered: [BigInt!]! # uint256[]
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  rawCoIpRefId: RawCoIp
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawGlobalActivity @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<TRANSACTION_HASH>_<LOG_INDEX>_<CATEGORY>_<SUB_CATEGORY>_<TOKEN_INDEX>
  chainId: BigInt! # Hardcoded
  category: String! # Category (e.g. "recipe", "vault", "boring", "v2", etc.)
  subCategory: String! # Sub Category (e.g. "deposit", "withdraw", "claim", etc.)
  sourceRefId: String! # Source Ref ID
  contractAddress: String! # Contract Address
  accountAddress: String! # Account Address
  tokenIndex: BigInt! # Token Index
  tokenId: String! # Token ID
  tokenAddress: String! # Token Address
  tokenAmount: BigInt! # Token Amount
  blockNumber: BigInt! # Block Number
  blockTimestamp: BigInt! # Block Timestamp
  transactionHash: String! # Transaction hash
  logIndex: BigInt! # Log Index
}

type IncentivesClaimed @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  incentiveLockerAddress: String! # address
  ap: String! # address
  incentivesClaimed: [String!]! # address[]
  incentiveAmountsPaid: [BigInt!]! # uint256[]
  protocolFeesPaid: [BigInt!]! # uint256[]
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentivesRemoved @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  ip: String! # address
  incentivesRemoved: [String!]! # address[]
  incentiveAmountsRemoved: [BigInt!]! # uint256[]
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentiveLockerOwnershipTransferStarted @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type IncentiveLockerOwnershipTransferred @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  previousOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type PointsProgramCreated @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  pointsId: String! # address
  owner: String! # address
  name: String! # string
  symbol: String! # string
  decimals: Int! # uint8
  whitelistedIPs: [String!]! # address[]
  spendCaps: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type PointsProgramOwnershipTransferred @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  pointsId: String! # address
  rawPointsProgramRefId: RawPointsProgram! # RawPointsProgram primary key
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type PointsSpent @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  pointsId: String! # address
  ip: String! # address
  rawPointsProgramRefId: RawPointsProgram! # RawPointsProgram primary key
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ProtocolFeeClaimantForCampaignSet @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  newProtocolFeeClaimant: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ProtocolFeeForCampaignSet @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  incentiveCampaignId: String! # bytes32
  newProtocolFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type SpendCapsUpdated @entity(immutable: true) {
  id: String!
  chainId: BigInt!
  pointsId: String! # address
  ips: [String!]! # address[]
  spendCaps: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

# type AssertersBlacklisted @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   blacklistedAsserters: [String!]! # address[]
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type AssertersWhitelisted @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   whitelistedAsserters: [String!]! # address[]
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type AssertionLivenessUpdated @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   newAssertionLiveness: BigInt! # uint64
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type BondCurrencyUpdated @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   newBondCurrency: String! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type IncentiveEmissionRatesUpdated @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   incentiveCampaignId: String! # bytes32
#   incentives: [String!]! # address[]
#   updatedRates: [BigInt!]! # uint256[]
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type MerkleRootAsserted @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   assertionId: String! # bytes32
#   incentiveCampaignId: String! # bytes32
#   asserter: String! # address
#   merkleRoot: String! # bytes32
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type MerkleRootAssertionDisputed @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   assertionId: String! # bytes32
#   merkleRoot: String! # bytes32
#   rawMerkleRootAssertionRefId: RawUmaMerkleRootAssertion!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type MerkleRootAssertionResolved @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   assertionId: String! # bytes32
#   merkleRoot: String! # bytes32
#   rawMerkleRootAssertionRefId: RawUmaMerkleRootAssertion!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type UmaMerkleChefAVOwnershipTransferStarted @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   previousOwner: String! # address
#   newOwner: String! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type UmaMerkleChefAVOwnershipTransferred @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   previousOwner: String! # address
#   newOwner: String! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type APOfferCreated @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   incentiveCampaignId: String! # bytes32
#   apOfferHash: String! # bytes32
#   ap: String! # address
#   multiplier: BigInt! # uint96
#   offerSize: BigInt! # uint256
#   rawUserMultiplierStateRefId: RawUserMultiplierState!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type APOfferFilled @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   apOfferHash: String! # bytes32
#   incentiveCampaignId: String! # bytes32
#   ap: String! # address
#   multiplier: BigInt! # uint96
#   offerSize: BigInt! # uint256
#   rawUserMultiplierStateRefId: RawUserMultiplierState!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type OptedInToIncentiveCampaign @entity(immutable: true) {
#   id: String!
#   chainId: BigInt!
#   incentiveCampaignId: String! # bytes32
#   ap: String! # address
#   rawUserMultiplierStateRefId: RawUserMultiplierState!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type RawIncentiveCampaignUmaMerkleChef @entity(immutable: false) {
#   id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>
#   chainId: BigInt! # Hardcoded
#   incentiveCampaignId: String! # Unique Campaign ID
#   incentiveIds: [String!]! # address[] - The incentives claimed for this campaign by the AP
#   incentiveEmissionRates: [BigInt!]! # Corresponding list of incentive emission rates, initially set to 0 for all
#   merkleRoot: String # Can be null, so removed "!" -- this will store the last "resolved" merkle root
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type RawMultiplierAPOffer @entity(immutable: false) {
#   id: String! # <CHAIN_ID>_<CAMPAIGN_ID>_<OFFER_TYPE>_<OFFER_HASH>
#   chainId: BigInt! # Hardcoded
#   incentiveCampaignId: String! # Unique Campaign ID
#   rawUserMultiplierStateRefId: RawUserMultiplierState!
#   offerType: Int!
#   offerHash: String!
#   accountAddress: String!
#   multiplier: BigInt!
#   offerSize: BigInt!
#   filled: Boolean!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type RawHistoricalMultiplierState @entity(immutable: false) {
#   id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<AP_ADDRESS>_<LOG_INDEX>
#   chainId: BigInt! # Hardcoded
#   incentiveCampaignId: String! # Unique Campaign ID
#   rawUserMultiplierStateRefId: RawUserMultiplierState!
#   accountAddress: String!
#   multiplier: BigInt!
#   offerSize: BigInt!
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type RawUserMultiplierState @entity(immutable: false) {
#   id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<AP_ADDRESS>
#   chainId: BigInt! # Hardcoded
#   incentiveCampaignId: String! # Unique Campaign ID
#   rawIncentiveCampaignRefId: RawIncentiveCampaign!
#   accountAddress: String!
#   multiplier: BigInt!
#   offerSize: BigInt!
#   historicalMultiplierStateRefIds: [RawHistoricalMultiplierState!]! @derivedFrom(field: "rawUserMultiplierStateRefId")
#   apOfferRefIds: [RawMultiplierAPOffer!]! @derivedFrom(field: "rawUserMultiplierStateRefId")
#   optInRefId: OptedInToIncentiveCampaign!  @derivedFrom(field: "rawUserMultiplierStateRefId")
#   createdAPOfferRefIds: [APOfferCreated!]!  @derivedFrom(field: "rawUserMultiplierStateRefId")
#   filledAPOfferRefIds: [APOfferFilled!]!  @derivedFrom(field: "rawUserMultiplierStateRefId")
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type RawUmaMerkleRootAssertion @entity(immutable: false) {
#   id: String! # <CHAIN_ID>_<ASSERTION_ID>
#   chainId: BigInt! # Hardcoded
#   incentiveCampaignId: String! # Unique Campaign ID
#   rawMerkleRootStateRefId: RawUmaMerkleRootState!
#   assertionId: String!
#   accountAddress: String!
#   merkleRoot: String!
#   state: Int! # 0 = Asserted, 1 = Resolved, 2 = Disputed
#   merkleRootDisputedRefId: MerkleRootAssertionDisputed! @derivedFrom(field: "rawMerkleRootAssertionRefId")
#   merkleRootResolvedRefId: MerkleRootAssertionResolved! @derivedFrom(field: "rawMerkleRootAssertionRefId")
#   blockNumber: BigInt! 
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

# type RawUmaMerkleRootState @entity(immutable: false) {
#   id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_UMA_MERKLE_ROOT_STATE
#   chainId: BigInt! # Hardcoded
#   incentiveCampaignId: String! # Unique Campaign ID
#   rawIncentiveCampaignRefId: RawIncentiveCampaign!
#   merkleRoot: String!
#   rawUmaMerkleRootAssertionRefIds: [RawUmaMerkleRootAssertion!]! @derivedFrom(field: "rawMerkleRootStateRefId")
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

type RawIncentiveCampaign @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>
  chainId: BigInt! # Hardcoded
  incentiveLockerAddress: String!
  incentiveCampaignId: String! # Unique Campaign ID
  actionVerifier: String! # Address of the action verifier
  actionParams: String! # String representing the actionParams for this campaign
  owner: String! # The address of the IP of this campaign
  incentivesOfferedIds: [String!]! # List of incentive IDs offered
  incentiveAmountsOffered: [BigInt!]! # Corresponding list of incentive amounts offered
  incentiveAmountsRemaining: [BigInt!]! # Corresponding list of incentive amounts remaining
  coIPs: [String!]!
  tag: String # Tag identifying the campaign type. Will be null if the action verifier isn't recognized.
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
  # Derived Fields
  incentiveCampaignBalancesRefIds: [RawIncentiveClaimBalance!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  coIpRefIds: [RawCoIp!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentivesAddedRefIds: [IncentivesAdded!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentivesRemovedRefIds: [IncentivesRemoved!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentivesClaimedRefIds: [IncentivesClaimed!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  incentraAVActionParamsRefId: RawIncentraAVActionParams @derivedFrom(field: "rawIncentiveCampaignRefId")
  # umcAvEmissionRateUpdateRefIds: [RawIncentiveEmissionRateUpdate!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
  # umcAvMerkleRootStateRefId: RawUmaMerkleRootState! @derivedFrom(field: "rawIncentiveCampaignRefId")
  # userMultiplierRefIds: [RawUserMultiplierState!]! @derivedFrom(field: "rawIncentiveCampaignRefId")
}

type RawIncentraAVActionParams @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  campaignType: Int! # 0 = SAME_CHAIN, 1 = CROSS_CHAIN
  incentraCampaign: String! # Address of the Incentra campaign
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawIncentiveCampaignUmaMerkleChef @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  
  # Extra fields added for merkle campaign
  incentiveIds: [String!]! # address[] - The incentives claimed for this campaign by the AP
  incentiveEmissionRates: [BigInt!]! # Corresponding list of incentive emission rates, initially set to 0 for all
  merkleRoot: String # Can be null, so removed "!" -- this will store the last "resolved" merkle root

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawMultiplierAPOffer @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<CAMPAIGN_ID>_<OFFER_TYPE>_<OFFER_HASH>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawUserMultiplierStateRefId: RawUserMultiplierState!
  offerType: Int!
  offerHash: String!
  accountAddress: String!
  multiplier: BigInt!
  offerSize: BigInt!
  filled: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawHistoricalMultiplierState @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<AP_ADDRESS>_<LOG_INDEX>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawUserMultiplierStateRefId: RawUserMultiplierState!
  accountAddress: String!
  multiplier: BigInt!
  offerSize: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawUserMultiplierState @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<AP_ADDRESS>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  accountAddress: String!
  multiplier: BigInt!
  offerSize: BigInt!
  historicalMultiplierStateRefIds: [RawHistoricalMultiplierState!]! @derivedFrom(field: "rawUserMultiplierStateRefId")
  apOfferRefIds: [RawMultiplierAPOffer!]! @derivedFrom(field: "rawUserMultiplierStateRefId")
  # optInRefId: OptedInToIncentiveCampaign!  @derivedFrom(field: "rawUserMultiplierStateRefId")
  # createdAPOfferRefIds: [APOfferCreated!]!  @derivedFrom(field: "rawUserMultiplierStateRefId")
  # filledAPOfferRefIds: [APOfferFilled!]!  @derivedFrom(field: "rawUserMultiplierStateRefId")
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawIncentiveClaimBalance @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<AP_ADDRESS>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Address identifying the points program
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  accountAddress: String! # address - Address of the AP
  incentiveIds: [String!]! # address[] - The incentives claimed for this campaign by the AP
  incentiveAmounts: [BigInt!]! # uint256[] - The amounts claimed for this campaign by the AP
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawCoIp @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<COIP_ADDRESS>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  accountAddress: String! # Address of the CoIP
  isCoIP: Boolean! # Flag indicating whether this CoIP can add incentives to this campaign
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
  incentivesAddedRefIds: [IncentivesAdded!]! @derivedFrom(field: "rawCoIpRefId") # All incentives added by this CoIP
}

type RawPointsProgram @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<POINTS_PROGRAM_ID>
  chainId: BigInt! # Hardcoded
  pointsAddress: String! # Address identifying the points program
  owner: String! # Points program owner address
  name: String! # string - Points program name 
  symbol: String! # string - Points program symbol
  decimals: Int! # uint8 - Points program decimals
  totalSupply: BigInt! # Total points awarded for this points program
  whitelistedIPs: [String!]! # address[]
  spendCaps: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
  # Derived Fields
  whitelistedIPsRefIds: [RawWhitelistedIP!]! @derivedFrom(field: "rawPointsProgramRefId")
  pointsSpentRefIds: [PointsSpent!]! @derivedFrom(field: "rawPointsProgramRefId")
  ownershipTransferredRefIds: [PointsProgramOwnershipTransferred!]! @derivedFrom(field: "rawPointsProgramRefId")
  awardRefIds: [Award!]! @derivedFrom(field: "rawPointsProgramRefId")
  pointsProgramBalanceRefIds: [RawPointsProgramBalance!]! @derivedFrom(field: "rawPointsProgramRefId")
}


type RawWhitelistedIP @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<POINTS_PROGRAM_ID>_<IP_ADDRESS>
  chainId: BigInt! # Hardcoded
  pointsAddress: String! # Address identifying the points program
  rawPointsProgramRefId: RawPointsProgram!
  accountAddress: String! # address - Address of the IP
  spendCap: BigInt! # uint256 - The IP's spend capacity
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawPointsProgramBalance @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<POINTS_PROGRAM_ID>_<AP_ADDRESS>
  chainId: BigInt! # Hardcoded
  pointsAddress: String! # Address identifying the points program
  rawPointsProgramRefId: RawPointsProgram!
  accountAddress: String! # address - Address of the AP
  balance: BigInt! # uint256 - The AP's points balance
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawIncentiveEmissionRateUpdate @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_<logIndex>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  incentives: [String!]! # address[] - The incentives for this campaign that had their rates updatedRates
  incentiveEmissionRates: [BigInt!]! # uint256[] - The updated rates scaled up by WAD
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawUmaMerkleRootAssertion @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<ASSERTION_ID>
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawMerkleRootStateRefId: RawUmaMerkleRootState!
  assertionId: String!
  accountAddress: String!
  merkleRoot: String!
  state: Int! # 0 = Asserted, 1 = Resolved, 2 = Disputed
  # merkleRootDisputedRefId: MerkleRootAssertionDisputed! @derivedFrom(field: "rawMerkleRootAssertionRefId")
  # merkleRootResolvedRefId: MerkleRootAssertionResolved! @derivedFrom(field: "rawMerkleRootAssertionRefId")
  blockNumber: BigInt! 
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawUmaMerkleRootState @entity(immutable: false) {
  id: String! # <CHAIN_ID>_<INCENTIVE_CAMPAIGN_ID>_UMA_MERKLE_ROOT_STATE
  chainId: BigInt! # Hardcoded
  incentiveCampaignId: String! # Unique Campaign ID
  rawIncentiveCampaignRefId: RawIncentiveCampaign!
  merkleRoot: String!
  rawUmaMerkleRootAssertionRefIds: [RawUmaMerkleRootAssertion!]! @derivedFrom(field: "rawMerkleRootStateRefId")
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}